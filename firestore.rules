rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isOwner(userId) { return isSignedIn() && request.auth.uid == userId; }
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    match /locations/{userId} {
      allow read: if isSignedIn();
      allow create, update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();

      // Validate location payload shape when writing
      allow write: if (isOwner(userId) || isAdmin()) &&
        request.resource.data.keys().hasOnly(['latestLocation', 'history']) &&
        (request.resource.data.latestLocation == null || (
          request.resource.data.latestLocation.keys().hasOnly(['lat','lng','timestamp','source']) &&
          (request.resource.data.latestLocation.lat is number) &&
          (request.resource.data.latestLocation.lng is number) &&
          (request.resource.data.latestLocation.source in ['mobile','esp32'])
        ));
    }

    match /alerts/{alertId} {
      allow read: if true;

      // Users can create alerts for themselves only
      allow create: if isSignedIn() && request.resource.data.userID == request.auth.uid &&
        request.resource.data.keys().hasAny(['userID','userName','message','location','imageURL','status','timestamp','verifiedByAI','aiSummary','blockchainTX']) &&
        (request.resource.data.location == null || request.resource.data.location.keys().hasOnly(['lat','lng']));

      // Owners can update their own non-admin fields; admins can update anything
      allow update: if isSignedIn() && (
        isAdmin() || (
          resource.data.userID == request.auth.uid &&
          request.resource.data.userID == resource.data.userID &&
          // owners cannot set blockchainTX or change status directly
          !('blockchainTX' in request.resource.data.diff(resource.data).changedKeys()) &&
          !('status' in request.resource.data.diff(resource.data).changedKeys())
        )
      );

      allow delete: if isAdmin();
    }

    match /ai_analysis/{areaId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /system_logs/{logId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    // SOS alerts created by clients (used by offline WebRTC relay)
    match /sos_alerts/{alertId} {
      // DEMO-OPEN: allow anyone to read and write SOS alerts
      // WARNING: For production, tighten this to authenticated-only and field validation
      allow read, write: if true;
    }
  }
}


